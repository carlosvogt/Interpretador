
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\004\000\002\002\005" +
    "\000\002\002\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\006\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\004\000\002\006\004\000\002\006\005\000\002\006" +
    "\012\000\002\006\012\000\002\006\014\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\004\011\000" +
    "\002\004\013\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\070\005\023\006\005\016\007\017\036\020" +
    "\020\025\022\026\025\027\006\031\017\033\021\034\014" +
    "\035\015\036\042\037\030\040\031\041\027\042\032\043" +
    "\033\044\004\045\010\046\013\047\037\050\043\051\034" +
    "\052\012\053\011\055\035\001\002\000\020\004\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\021\uffeb\025\uffeb\001\002" +
    "\000\062\005\023\006\005\016\007\017\036\020\020\025" +
    "\022\026\025\027\006\035\015\036\042\037\030\040\031" +
    "\041\027\042\032\043\033\044\004\045\010\046\013\047" +
    "\037\050\043\051\034\052\012\053\011\055\035\001\002" +
    "\000\062\005\023\006\005\016\007\017\036\020\020\025" +
    "\022\026\025\027\006\035\015\036\042\037\030\040\031" +
    "\041\027\042\032\043\033\044\004\045\010\046\013\047" +
    "\037\050\043\051\034\052\012\053\011\055\035\001\002" +
    "\000\004\022\172\001\002\000\020\004\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\021\uffea\025\uffea\001\002\000\010" +
    "\005\uffca\022\uffca\033\uffca\001\002\000\010\005\uffcb\022" +
    "\uffcb\033\uffcb\001\002\000\020\004\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\021\uffe9\025\uffe9\001\002\000\006\054" +
    "\166\055\167\001\002\000\020\004\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\021\ufff2\025\ufff2\001\002\000\014\004" +
    "\165\006\055\007\052\010\054\011\053\001\002\000\020" +
    "\025\147\047\037\050\043\051\034\052\012\053\011\055" +
    "\146\001\002\000\062\005\023\006\005\016\007\017\036" +
    "\020\020\025\022\026\025\027\006\035\015\036\042\037" +
    "\030\040\031\041\027\042\032\043\033\044\004\045\010" +
    "\046\013\047\037\050\043\051\034\052\012\053\011\055" +
    "\035\001\002\000\004\054\141\001\002\000\032\004\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\014\122\015\125\016" +
    "\126\017\124\021\ufff3\025\ufff3\030\123\001\002\000\062" +
    "\005\023\006\005\016\007\017\036\020\020\025\022\026" +
    "\025\027\006\035\015\036\042\037\030\040\031\041\027" +
    "\042\032\043\033\044\004\045\010\046\013\047\037\050" +
    "\043\051\034\052\012\053\011\055\035\001\002\000\004" +
    "\022\107\001\002\000\062\005\023\006\005\016\007\017" +
    "\036\020\020\025\022\026\025\027\006\035\015\036\042" +
    "\037\030\040\031\041\027\042\032\043\033\044\004\045" +
    "\010\046\013\047\037\050\043\051\034\052\012\053\011" +
    "\055\035\001\002\000\004\004\105\001\002\000\020\004" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\021\uffee\025\uffee" +
    "\001\002\000\020\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\021\ufff0\025\ufff0\001\002\000\020\004\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\021\uffef\025\uffef\001\002\000" +
    "\020\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\021\uffed" +
    "\025\uffed\001\002\000\020\004\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\021\uffec\025\uffec\001\002\000\010\005\uffcc" +
    "\022\uffcc\033\uffcc\001\002\000\032\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\014\073\015\076\016\077\017\075" +
    "\021\ufff4\025\ufff4\030\074\001\002\000\004\022\064\001" +
    "\002\000\010\005\uffce\022\uffce\033\uffce\001\002\000\004" +
    "\004\063\001\002\000\072\002\046\005\023\006\005\016" +
    "\007\017\036\020\020\025\022\026\025\027\006\031\017" +
    "\033\021\034\014\035\015\036\042\037\030\040\031\041" +
    "\027\042\032\043\033\044\004\045\010\046\013\047\037" +
    "\050\043\051\034\052\012\053\011\055\035\001\002\000" +
    "\020\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\021\ufff1" +
    "\025\ufff1\001\002\000\010\005\uffcd\022\uffcd\033\uffcd\001" +
    "\002\000\014\004\056\006\055\007\052\010\054\011\053" +
    "\001\002\000\004\004\051\001\002\000\004\002\000\001" +
    "\002\000\004\004\050\001\002\000\072\002\ufffe\005\ufffe" +
    "\006\ufffe\016\ufffe\017\ufffe\020\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\055\ufffe" +
    "\001\002\000\072\002\ufffc\005\ufffc\006\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\055\ufffc\001\002\000\062\005" +
    "\023\006\005\016\007\017\036\020\020\025\022\026\025" +
    "\027\006\035\015\036\042\037\030\040\031\041\027\042" +
    "\032\043\033\044\004\045\010\046\013\047\037\050\043" +
    "\051\034\052\012\053\011\055\035\001\002\000\062\005" +
    "\023\006\005\016\007\017\036\020\020\025\022\026\025" +
    "\027\006\035\015\036\042\037\030\040\031\041\027\042" +
    "\032\043\033\044\004\045\010\046\013\047\037\050\043" +
    "\051\034\052\012\053\011\055\035\001\002\000\062\005" +
    "\023\006\005\016\007\017\036\020\020\025\022\026\025" +
    "\027\006\035\015\036\042\037\030\040\031\041\027\042" +
    "\032\043\033\044\004\045\010\046\013\047\037\050\043" +
    "\051\034\052\012\053\011\055\035\001\002\000\062\005" +
    "\023\006\005\016\007\017\036\020\020\025\022\026\025" +
    "\027\006\035\015\036\042\037\030\040\031\041\027\042" +
    "\032\043\033\044\004\045\010\046\013\047\037\050\043" +
    "\051\034\052\012\053\011\055\035\001\002\000\072\002" +
    "\001\005\001\006\001\016\001\017\001\020\001\025\001" +
    "\026\001\027\001\031\001\033\001\034\001\035\001\036" +
    "\001\037\001\040\001\041\001\042\001\043\001\044\001" +
    "\045\001\046\001\047\001\050\001\051\001\052\001\053" +
    "\001\055\001\001\002\000\020\004\ufff9\006\ufff9\007\ufff9" +
    "\010\054\011\ufff9\021\ufff9\025\ufff9\001\002\000\020\004" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\021\ufff8\025\ufff8" +
    "\001\002\000\020\004\ufff7\006\ufff7\007\ufff7\010\054\011" +
    "\ufff7\021\ufff7\025\ufff7\001\002\000\020\004\ufffa\006\ufffa" +
    "\007\ufffa\010\054\011\ufffa\021\ufffa\025\ufffa\001\002\000" +
    "\072\002\ufffd\005\ufffd\006\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\031\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\055\ufffd\001\002\000\004\055\065\001\002" +
    "\000\004\024\066\001\002\000\004\055\067\001\002\000" +
    "\004\024\070\001\002\000\004\055\071\001\002\000\004" +
    "\023\072\001\002\000\020\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\021\uffe5\025\uffe5\001\002\000\004\055\104" +
    "\001\002\000\004\055\103\001\002\000\004\055\102\001" +
    "\002\000\004\055\101\001\002\000\004\055\100\001\002" +
    "\000\010\005\uffd7\022\uffd7\033\uffd7\001\002\000\010\005" +
    "\uffd6\022\uffd6\033\uffd6\001\002\000\010\005\uffd8\022\uffd8" +
    "\033\uffd8\001\002\000\010\005\uffd4\022\uffd4\033\uffd4\001" +
    "\002\000\010\005\uffd5\022\uffd5\033\uffd5\001\002\000\072" +
    "\002\ufffb\005\ufffb\006\ufffb\016\ufffb\017\ufffb\020\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\055\ufffb\001\002\000\020\004\uffe8\006\055\007" +
    "\052\010\054\011\053\021\uffe8\025\uffe8\001\002\000\004" +
    "\055\110\001\002\000\004\024\111\001\002\000\004\055" +
    "\112\001\002\000\004\024\113\001\002\000\004\055\114" +
    "\001\002\000\004\024\115\001\002\000\004\055\116\001" +
    "\002\000\004\023\117\001\002\000\020\004\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\021\uffe3\025\uffe3\001\002\000" +
    "\014\006\055\007\052\010\054\011\053\025\121\001\002" +
    "\000\020\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\021" +
    "\uffe6\025\uffe6\001\002\000\006\025\137\055\140\001\002" +
    "\000\006\025\135\055\136\001\002\000\006\025\134\055" +
    "\133\001\002\000\006\025\132\055\131\001\002\000\006" +
    "\025\127\055\130\001\002\000\010\005\uffd2\022\uffd2\033" +
    "\uffd2\001\002\000\010\005\uffdc\022\uffdc\033\uffdc\001\002" +
    "\000\010\005\uffdb\022\uffdb\033\uffdb\001\002\000\010\005" +
    "\uffd1\022\uffd1\033\uffd1\001\002\000\010\005\uffdd\022\uffdd" +
    "\033\uffdd\001\002\000\010\005\uffd3\022\uffd3\033\uffd3\001" +
    "\002\000\010\005\uffcf\022\uffcf\033\uffcf\001\002\000\010" +
    "\005\uffd9\022\uffd9\033\uffd9\001\002\000\010\005\uffd0\022" +
    "\uffd0\033\uffd0\001\002\000\010\005\uffda\022\uffda\033\uffda" +
    "\001\002\000\004\055\142\001\002\000\004\010\143\001" +
    "\002\000\004\004\uffe0\001\002\000\014\006\055\007\052" +
    "\010\054\011\053\021\145\001\002\000\020\004\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\021\ufff5\025\ufff5\001\002" +
    "\000\014\014\073\015\076\016\077\017\075\030\074\001" +
    "\002\000\014\014\122\015\125\016\126\017\124\030\123" +
    "\001\002\000\006\005\152\033\151\001\002\000\004\054" +
    "\161\001\002\000\062\005\023\006\005\016\007\017\036" +
    "\020\020\025\022\026\025\027\006\035\015\036\042\037" +
    "\030\040\031\041\027\042\032\043\033\044\004\045\010" +
    "\046\013\047\037\050\043\051\034\052\012\053\011\055" +
    "\035\001\002\000\014\006\055\007\052\010\054\011\053" +
    "\025\154\001\002\000\004\032\155\001\002\000\004\005" +
    "\156\001\002\000\062\005\023\006\005\016\007\017\036" +
    "\020\020\025\022\026\025\027\006\035\015\036\042\037" +
    "\030\040\031\041\027\042\032\043\033\044\004\045\010" +
    "\046\013\047\037\050\043\051\034\052\012\053\011\055" +
    "\035\001\002\000\014\006\055\007\052\010\054\011\053" +
    "\025\160\001\002\000\004\004\uffde\001\002\000\004\032" +
    "\162\001\002\000\004\033\163\001\002\000\004\054\164" +
    "\001\002\000\004\004\uffdf\001\002\000\072\002\uffff\005" +
    "\uffff\006\uffff\016\uffff\017\uffff\020\uffff\025\uffff\026\uffff" +
    "\027\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\055" +
    "\uffff\001\002\000\004\055\171\001\002\000\004\055\170" +
    "\001\002\000\004\004\uffe1\001\002\000\004\004\uffe2\001" +
    "\002\000\004\055\173\001\002\000\004\024\174\001\002" +
    "\000\004\055\175\001\002\000\004\024\176\001\002\000" +
    "\004\055\177\001\002\000\004\023\200\001\002\000\020" +
    "\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\021\uffe4\025" +
    "\uffe4\001\002\000\020\004\uffe7\006\055\007\052\010\054" +
    "\011\053\021\uffe7\025\uffe7\001\002\000\020\004\ufff6\006" +
    "\ufff6\007\ufff6\010\054\011\ufff6\021\ufff6\025\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\014\002\040\003\037\004\025\005\023\006" +
    "\015\001\001\000\002\001\001\000\006\005\023\006\201" +
    "\001\001\000\006\005\023\006\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\147\001\001\000\006\005\023" +
    "\006\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\023\006\117\001\001\000\002\001\001\000\006" +
    "\005\023\006\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\046\004\044\005\023\006\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\023\006\061\001\001\000\006" +
    "\005\023\006\060\001\001\000\006\005\023\006\057\001" +
    "\001\000\006\005\023\006\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\023\006\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\023" +
    "\006\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    Parser(Scanner s){ this.s=s; }
    Map<String, Integer> simbolos = new HashMap<String, Integer>();	
	ArrayList<Integer> vectors = new ArrayList<>();
	ArrayList<Integer> elementos = new ArrayList<>();
	
	public void syntax_error(Symbol s){
		System.out.println("compiler has detected a syntax error at line -> " + s.left 
			+ " column " + s.right);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= begin exp SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println(e);      	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= exp SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println(e);      	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= begin loop SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		          						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin ::= loop SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 						        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // begin ::= begin cond SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 		 						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // begin ::= cond SEMI 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		          						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp MAIS exp 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1+e2;                	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp MENOS exp 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1-e2;                	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp VEZES exp 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1*e2;                	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp DIVIDIR exp 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2;         		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= MENOS exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e;                  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= LPAREN exp RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;                    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= NUMERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n;                    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= ID 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i);     	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= UM 
            {
              Integer RESULT =null;
		int umleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int umright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object um = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 1;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= DOIS 
            {
              Integer RESULT =null;
		int doisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dois = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 2;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= TRES 
            {
              Integer RESULT =null;
		int tresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tres = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 3;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= QUATRO 
            {
              Integer RESULT =null;
		int quatroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int quatroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object quatro = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 4;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= CINCO 
            {
              Integer RESULT =null;
		int cincoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cincoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cinco = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 5;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= SEIS 
            {
              Integer RESULT =null;
		int seisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seis = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 6;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= SETE 
            {
              Integer RESULT =null;
		int seteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sete = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 7;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= OITO 
            {
              Integer RESULT =null;
		int oitoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oitoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object oito = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 8;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= NOVE 
            {
              Integer RESULT =null;
		int noveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nove = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 9;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= DEZ 
            {
              Integer RESULT =null;
		int dezleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dezright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dez = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 10;   					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= DOBRO exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e+e; 					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= TRIPLO exp 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = 3*e; 					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= ATRIB exp ID 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 simbolos.put(i.toString(), e);  System.out.println("Steps -> "+ simbolos.get(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= MAIOR LCOL NUMERO VIRG NUMERO VIRG NUMERO RCOL 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 vectors.add(n1);
																	 vectors.add(n2);
																	 vectors.add(n3);
																	 RESULT = Collections.max(vectors);
																  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= MENOR LCOL NUMERO VIRG NUMERO VIRG NUMERO RCOL 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 vectors.add(n1);
																	 vectors.add(n2);
																	 vectors.add(n3);
																	 RESULT = Collections.min(vectors);
																  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= choice LCOL NUMERO VIRG NUMERO VIRG NUMERO VIRG NUMERO RCOL 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer n3 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n4 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 elementos.add(n1);
																					elementos.add(n2);
																					elementos.add(n3);
																					elementos.add(n4);
																					RESULT = elementos.get((int)i);
																				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // loop ::= WHILE PALAVRA NUMERO 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 while(n>0){
									  System.out.println(p);
									  n=n-1; } 							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // loop ::= WHILE NUMERO NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 while(n2>0){
										 System.out.println(n1);
										 n2=n2-1; } 					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // loop ::= WRITE PALAVRA NUMERO VEZES 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 while(n>0){
										 System.out.println(n + "-> " + p);
										 n=n-1; } 					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= IF choice WRITE PALAVRA ELSE WRITE PALAVRA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if((boolean)i){
																   System.out.println(p1);
																} else {
																   System.out.println(p2);
																} 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= IF choice ATRIB exp ID ELSE ATRIB exp ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if((boolean)i){
																   simbolos.put(id.toString(), e1);
																} else {
																   simbolos.put(d.toString(), e2);
	   															} 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // choice ::= ID MAIOR NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = (int)RESULT>n;  										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // choice ::= ID MENOR NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = (int)RESULT<n;  										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // choice ::= ID MAIORIGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = (int)RESULT>=n; 										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // choice ::= ID MENORIGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = (int)RESULT<=n; 										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // choice ::= ID IGUAL NUMERO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = (int)RESULT==n; 										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // choice ::= NUMERO MAIOR NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n1>n2;  			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // choice ::= NUMERO MENOR NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n1<n2;  			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // choice ::= NUMERO MAIORIGUAL NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n1>=n2; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // choice ::= NUMERO MENORIGUAL NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n1<=n2; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // choice ::= NUMERO IGUAL NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (int)n1==(int)n2; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // choice ::= ID MAIOR ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = simbolos.get(d); RESULT = (int)RESULT>(int)RESULT;  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // choice ::= ID MENOR ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = simbolos.get(d); RESULT = (int)RESULT<(int)RESULT;  	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // choice ::= ID MAIORIGUAL ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = simbolos.get(d); RESULT = (int)RESULT>=(int)RESULT; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // choice ::= ID MENORIGUAL ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = simbolos.get(i); RESULT = simbolos.get(d); RESULT = (int)RESULT<=(int)RESULT; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // choice ::= ID IGUAL ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 int result1 = simbolos.get(i); int result2 = simbolos.get(d); RESULT = result1==result2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // choice ::= PRIMEIRO 
            {
              Object RESULT =null;
		 RESULT = 0; 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // choice ::= SEGUNDO 
            {
              Object RESULT =null;
		 RESULT = 1; 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // choice ::= TERCEIRO 
            {
              Object RESULT =null;
		 RESULT = 2; 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // choice ::= QUARTO 
            {
              Object RESULT =null;
		 RESULT = 3; 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // choice ::= QUINTO 
            {
              Object RESULT =null;
		 RESULT = 4; 				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("choice",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
